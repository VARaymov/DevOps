stages:
  # - build
  # - test
  # - release
  - module-pipelines
  - notify
# include:
#   - template: Security/SAST.gitlab-ci.yml

frontend-job:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend # depend нужен, если какой-нибудь дочерний пайплан свалился, мы значил, что общий пайплайн тоже идет с ошибкой
  only:
    changes: # как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
    - frontend/**/*

backend-job:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy:
      depend
  only:
    changes: # как только происходит изменение в папке backend, запускается дочерний пайплайн,который лежит в этой папке
      - backend/**/*

# spotbugs-sast:
#   stage: test
#   variables:
#     COMPILE: "false"
#     SAST_JAVA_VERSION: 11
#     MAVEN_REPO_PATH: $CI_PROJECT_DIR/backend/.m2/repository
#   artifacts:
#     paths:
#       - backend/target/java/sausage-store-0.0.1-SNAPSHOT.jar
#   needs:
#     - build-backend-code-job

# sonarqube-backend-sast:
#   stage: test
#   only:
#     changes:
#       - backend/*
#   image: maven:3.8-openjdk-16
#   script:
#     - cd backend
#     - >
#       mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
#       -Dsonar.host.url=${SONARQUBE_URL_BACKEND}
#       -Dsonar.login=${SONAR_LOGIN_BACKEND}
#       -Dsonar.projectName="19_RAYUMOVVALERY_BACKEND"
#   needs:
#     - build-backend-code-job

# sonarqube-frontend-sast:
#   stage: test
#   only:
#     changes:
#       - frontend/*
#   image: sonarsource/sonar-scanner-cli
#   script:
#     - cd frontend
#     - >
#       sonar-scanner -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} 
#       -Dsonar.sources=.
#       -Dsonar.host.url=${SONARQUBE_URL_FRONTEND} 
#       -Dsonar.login=${SONAR_LOGIN_FRONTEND}
#       -Dsonar.projectName="19_RAYUMOVVALERY_FRONTEND"
#   needs:
#     - build-frontend-code-job
  
telegram-notification-backend:
  stage: notify
  only:
    changes:
        - "backend/*"
  variables:
    ARTIFACT_URL:
      ${NEXUS_REPO_URL_BACKEND}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
    VERSION:
      grep -Po 'VERSION=\K.*' ${CI_PROJECT_DIR}/backend/version.txt
  script:
    - curl -X POST -H "Content-type:application/json" --data '{"chat_id":"-1001634310929", "text":"Вышла новая версия backend сосисочной — '${VERSION}'. Скачать артефакт можно по ссылке — '${ARTIFACT_URL}'"}' "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  needs:
    - backend-job
  # rules:
    # - if: $CI_COMMIT_MESSAGE =~ "/send notification/"
   

telegram-notification-frontend:
  stage: notify
  only:
    changes:
    - "frontend/*"
  variables:
    ARTIFACT_URL:
      ${NEXUS_REPO_URL_FRONTEND}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  script: 
    - curl -X POST -H "Content-type:application/json" --data '{"chat_id":"-1001634310929", "text":"Вышла новая версия frontend сосисочной - '${VERSION}'. Скачать артефакт можно по ссылке - '${ARTIFACT_URL}'"}' "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  needs:
    - frontend-job
  # rules:
    # - if: $CI_COMMIT_MESSAGE =~ "/send notification/"
      
