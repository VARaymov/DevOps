stages:
  - build
  - test
  - release
  - deploy

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

# Выносим в отдельный блок переменные которые могут пригодиться, чтобы их было в дальнейшем удобнее менять в одном месте
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  DEV_USER: student
  DEV_HOST: std-019-02.praktikum-services.tech
  TEXT: ${NEXUS_REPO_URL_FRONTEND}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

# Используем механизм кеширования, чтобы сохранять между задачами собранный фронтенд
cashe:
  paths:
    - frontend/dist

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA

# Запуск проверки сонаром
sonarqube-frontend-sast:
  stage: test
  variables:
    COMPILE: "true"
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} 
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL_FRONTEND} 
      -Dsonar.login=${SONAR_LOGIN_FRONTEND}
      -Dsonar.projectName="19_RAYUMOVVALERY_FRONTEND"
  needs:
    - build-frontend

 Запуск проверки секьюрити
gitlab-sast:
  stage: test
  needs:
    - build-frontend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
#     when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./frontend/frontend_deploy.sh
  rules: # Специальное условие, требующие ручного нажатия для установки на виртуальную машину нового обновления
    - when: manual
