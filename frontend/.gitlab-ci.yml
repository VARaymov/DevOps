stages:
  - build
  - test
  - release
  - notify
  - deploy

# Выносим в отдельный блок переменные которые могут пригодиться, чтобы их было в дальнейшем удобнее менять в одном месте
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  DEV_USER: student
  DEV_HOST: std-019-02.praktikum-services.tech
  TEXT: ${NEXUS_REPO_URL_FRONTEND}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

# Используем механизм кеширования, чтобы сохранять между задачами собранный фронтенд
cashe:
  paths:
    - frontend/dist

build-frontend-code-job:
  stage: build
  before_script:
    - echo "FRONTEND_JOB=$CI_JOB_ID" >> frontend.env
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend
    reports:
      dotenv: frontend.env
  cache:
    key: frontend_cache
    paths:
      - ${CI_PROJECT_DIR}/frontend/dist/frontend 

# Запуск проверки сонаром
sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} 
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL_FRONTEND} 
      -Dsonar.login=${SONAR_LOGIN_FRONTEND}
      -Dsonar.projectName="19_RAYUMOVVALERY_FRONTEND"
  needs:
    - build-frontend-code-job

# Запуск проверки секьюрити
gitlab-sast:
  stage: test
  needs:
    - build-frontend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml


# Архивируем скомпилированные файлы и загружаем архив с помощью curl запроса на Nexus
upload-frontend-release-job:
  stage: release
  only:
    changes:
      - frontend/**/*
  needs:
    - build-frontend-code-job
  script:
    - cd frontend
    - tar czvf sausage-store-${VERSION}.tar.gz ${CI_PROJECT_DIR}/frontend/dist/frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL_FRONTEND}/sausage-store-front/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  cache:
    key: frontend_cache
    paths:
      - ${CI_PROJECT_DIR}/frontend/dist/frontend

# Деплой нового фронтенда на виртуальную машину. В блоке before_script запускается предварительно настройка подключения ssh к виртуальной машине, в блоке script копируем service и скрипт для деплоя приложения. И передаем при его запуске необходимые переменные
deploy-frontend-job:
  stage: deploy
  needs:
    - upload-frontend-release-job
  before_script:
    - 'command -v ssh-agent >dev/null || (apt-get update -y && apt-get install openssh-client -y)'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
    - echo ${SSH_KNOWN_HOSTS} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts    
  script:
    - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL_FRONTEND=${NEXUS_REPO_URL_FRONTEND}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./frontend/deploy.sh
    environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://std-019-02.praktikum-services.tech:8090
    auto_stop_in: 1h
  rules:
    - when: manual

telegram-notification-frontend:
  stage: notify
  script: 
    - curl -X POST -H "Content-type:application/json" --data '{"chat_id":"-1001634310929", "text":"Вышла новая версия frontend сосисочной - '${VERSION}'. Скачать артефакт можно по ссылке - '${ARTIFACT_URL}'"}' "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  needs:
    - upload-frontend-release-job
  rules:
    - if: $CI_COMMIT_MESSAGE =~ "/send notification/"
