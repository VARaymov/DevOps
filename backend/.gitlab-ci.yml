stages:
  - build
  #- test
  - release
  - deploy
  - notify

# Выносим в отдельный блок переменные, которые могут пригодиться - чтобы в будущем удобнее менять их в одном месте
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/backend/.m2/repository
  TEXT: ${NEXUS_REPO_URL_BACKEND}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  DEV_USER: student
  DEV_HOST: std-019-02.praktikum-services.tech
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

# Используем механизм кеширования, чтобы сохранять между задачами maven-репозиторий со всеми выкаченными и скомпилированными артефактами
# cache:
#   paths:
#     - ${CI_PROJECT_DIR}/.m2/repository

build-backend-code-job:
  stage: build
  script:
    - echo "BACKEND_JOB=$CI_JOB_ID" >> backend.env
    - cd backend
    - echo "VERSION=${VERSION}" >> version.txt
    - pwd && ls -la
    - cat version.txt
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/backend/.m2/repository -Dversion.application=${VERSION} -Dmaven.test.skip=true
    - cd target
    - mkdir java
    - mv sausage-store-${VERSION}.jar java
  artifacts:
    paths:
      - backend/target/java/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/backend/version.txt
    reports:
      dotenv: backend.env
  cache:
    key: backend_cache
    paths:
      - ${CI_PROJECT_DIR}/backend/.m2/repository # для хранения зависимости бекенда

# Запуск проверки Сонаром
#sonarqube-backend-sast:
  #stage: test
  #only:
   # changes:
    #  - backend/*
  #image: maven:3.8-openjdk-16
  #script:
   # - cd backend
    #- >
     # mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      #-Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      #-Dsonar.host.url=${SONARQUBE_URL_BACKEND}
      #-Dsonar.login=${SONAR_LOGIN_BACKEND}
      #-Dsonar.projectName="19_RAYUMOVVALERY_BACKEND"
  #needs:
#    - build-backend-code-job

# Запуск проверки безопасности
#gitlab-sast:
 # stage: test
 # needs:
 #   - build-backend-code-job
 # trigger:
 #   include:
#      - template: Security/SAST.gitlab-ci.yml

# Используя механизм maven, загружаем собранный jar в Nexus, указываем в команде кастомный settings.xml, в котором прописан url нашего Nexus
upload-backend-release-job:
  stage: release
  #needs:
 #   - sonarqube-backend-sast
  #  - gitlab-sast
  script:
    - cd backend
    - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/backend/.m2/repository -s ${CI_PROJECT_DIR}/backend/settings.xml -Dversion.application=${VERSION} -DskipTests deploy
  cache:
    key: backend_cache
    paths:
      - ${CI_PROJECT_DIR}/backend/.m2/repository # для хранения зависимости бекенда

# Деплой нового бэкенда на виртуальную машину. В блоке before_script предварительно запускается настройка подключения ssh к виртуальной машине, в блоке script копируем service-файл и скрипт для деплоя приложения. И передаём при запуске этих скриптов необходимые переменные
deploy-backend-job:
  stage: deploy
  needs:
    - upload-backend-release-job
  before_script:
    # устанавилваем ssg-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >dev/null || (apt-get update -y && apt-get install openssh-client -y)'
    - eval $(ssh-agent -s)
    # сохраняем сгенерированный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
    - echo ${SSH_KNOWN_HOSTS} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts    
  script:
    # выполняем простую комкнду для проверки
    - ssh ${DEV_USER}@${DEV_HOST} "id"
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - scp ./backend/variables.env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/variables.env
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL_BACKEND=${NEXUS_REPO_URL_BACKEND}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://std-019-02.praktikum-services.tech:8090
    auto_stop_in: 1h
  rules: # Специальное условие, требующие ручного нажатия для установки на виртуальную машину нового обновления
    - when: manual
    
# Отправка сообщения в Telegram с помощью curl запроса, если в сообщении коммита есть фраза "send notification"
telegram-notification-backend:
  stage: notify
  script:
    - curl -X POST -H "Content-type:application/json" --data '{"chat_id":"-1001634310929", "text":"Вышла новая версия backend сосисочной — '${VERSION}'. Скачать артефакт можно по ссылке — '${TEXT}'"}' "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  needs:
    - upload-backend-release-job
  rules:
    - if: $CI_COMMIT_MESSAGE =~ "/send notification/"
