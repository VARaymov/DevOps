stages:
  - build
  - release
  # - notify
  - deploy
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/backend/.m2/repository
  DEV_USER: student
  # DEV_HOST: 172.17.0.1
  DEV_HOST: std-019-02.praktikum-services.tech
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

# build-backend-code-job:
#   stage: build
#   script:
#     - echo "BACKEND_JOB=$CI_JOB_ID" >> backend.env
#     - cd backend
#     - echo "VERSION=${VERSION}" >> version.txt
#     - pwd && ls -la
#     - cat version.txt
#     - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/backend/.m2/repository -Dversion.application=${VERSION}
#     - cd target
#     - mkdir java
#     - mv sausage-store-${VERSION}.jar java
#   rules:
#     - changes:
#         - backend/**/*
#   artifacts:
#     paths:
#       - backend/target/java/sausage-store-${VERSION}.jar
#       - ${CI_PROJECT_DIR}/backend/version.txt
#     reports:
#       dotenv: backend.env
#   cache:
#     key: backend_cache
#     paths:
#       - ${CI_PROJECT_DIR}/backend/.m2/repository # для хранения зависимости бекенда

upload-backend-release-job:
  stage: release
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/backend/.m2/repository -s ${CI_PROJECT_DIR}/backend/settings.xml -Dversion.application=${VERSION} -DskipTests deploy
  cache:
    key: backend_cache
    paths:
      - ${CI_PROJECT_DIR}/backend/.m2/repository # для хранения зависимости бекенда
  rules:
    - changes:
        - backend/**/*

deploy-backend-job:
  stage: deploy
  needs:
    - upload-backend-release-job
  environment:
    name: staging
    url: http://std-019-02.praktikum-services.tech:8090
  before_script:
    # устанавилваем ssg-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >dev/null || (apt-get update -y && apt-get install openssh-client -y)'
    - eval $(ssh-agent -s)
    # сохраняем сгенерированный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan $DEV_HOST)
    - echo ${SSH_KNOWN_HOSTS} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts    
  script:
    # выполняем простую комкнду для проверки
    - ssh ${DEV_USER}@${DEV_HOST} "id"
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL_BACKEND=${NEXUS_REPO_URL_BACKEND}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
    

# telegram-notification-backend:
#   stage: notify
#   only:
#     changes:
#         - "backend/*"
#   variables:
#     ARTIFACT_URL:
#       ${NEXUS_REPO_URL_BACKEND}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
#   script:
#     - curl -X POST -H "Content-type:application/json" --data '{"chat_id":"-1001634310929", "text":"Вышла новая версия backend сосисочной — '${VERSION}'. Скачать артефакт можно по ссылке — '${ARTIFACT_URL}'"}' "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
#   needs:
#     - upload-backend-release-job
#   # rules:
#     # - if: $CI_COMMIT_MESSAGE =~ "/send notification/"
